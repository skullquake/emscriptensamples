var config={
	env:{
		//memoryBase:0,//renamed to __memory_base
		__memory_base:0,
		//tableBase:0,//renamted to __table_base
		__table_base:0,
		/*
		memory:new WebAssembly.Memory({//does not set up correctly, use autogenerated
			initial:256,
			maximum:256,
			//shared:true
		}),
		*/
		table:new WebAssembly.Table({
			initial:0,
			element:'anyfunc',
		}),
		_log:function(val){console.log("LOG:"+val);}
	}
};
WebAssembly.instantiateStreaming(fetch("./index.wasm"),config)
	.then(
		function(module){
			window.module=module;
			function log(val){
				document.getElementById("output").innerText+=val+"\n";
			}
			var memory=module.instance.exports.memory.buffer;
			var bufsz=8;
			var bufptr=module.instance.exports.malloc(bufsz);
			if(bufptr!=null){//how to check for nullptr?
				var buf=new Int32Array(memory,bufptr,bufsz)
				for(var i=0;i<bufsz;i++){
					buf[i]=i;
				}
				var sum=module.instance.exports.sum(bufptr,bufsz);
				var avg=module.instance.exports.avg(bufptr,bufsz);
				log("-".repeat(40));
				log(["bufsz",bufsz].join(":"));
				log(["bufptr",bufptr].join(":"));
				log(["buf",buf.join(",")].join(":"));
				log(["sum",sum].join(":"));
				log(["avg",avg].join(":"));
				log("-".repeat(40));
				module.instance.exports.free(bufptr);

			}else{
				log("Failed to allocate buffer");
			}

		},
		function(err){console.error(err)}
	);
