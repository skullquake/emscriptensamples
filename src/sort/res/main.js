var config={
	env:{
		//memoryBase:0,//renamed to __memory_base
		__memory_base:0,
		//tableBase:0,//renamted to __table_base
		__table_base:0,
		/*
		memory:new WebAssembly.Memory({//does not set up correctly, use autogenerated
			initial:256,
			maximum:256,
			//shared:true
		}),
		*/
		table:new WebAssembly.Table({
			initial:0,
			element:'anyfunc',
		}),
		_imp0:function(){console.log("_imp0");},
		_imp1:function(x){console.log("_imp1:"+JSON.stringify(x));},
		_log:function(val){console.log("LOG:"+val);}
	}
};
WebAssembly.instantiateStreaming(fetch("./index.wasm"),config)
	.then(
		function(module){
			window.module=module;
			function log(val){
				document.getElementById("output").innerText+=val+"\n";
			}
			var memory=module.instance.exports.memory.buffer;
			var buf0=module.instance.exports.buf0;//marked exported
			var buf1=module.instance.exports.buf1;//marked exported
			var bufsz=module.instance.exports.getBufsz();
			log("-".repeat(20)+" buffers "+"-".repeat(20));
			log("buf0:  0x"+buf0);
			log("buf1:  0x"+buf1);
			log("bufsz: "+bufsz);
			var arr0=new Int32Array(memory,buf0.value,bufsz);
			var arr1=new Int32Array(memory,buf1.value,bufsz);
			for(var j=0;j<32;j++){
				log("-".repeat(20)+" test "+j+" "+"-".repeat(20));
				for(var i=0;i<bufsz;i++){
					arr0[i]=1;
					arr1[i]=1;
				}
				for(var i=0;i<bufsz;i++){
					arr0[i]=Math.floor(Math.random()*8);
					arr1[i]=Math.floor(Math.random()*8);
				}
				log("arr0:   "+arr0.join(","));
				log("arr1:   "+arr0.join(","));
				log("bufsum: "+module.instance.exports.sumBuf());
				log("bufdot: "+module.instance.exports.dotBuf());
			}
			log("-".repeat(40));

		},
		function(err){console.error(err)}
	);
